plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.2'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.project'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

archivesBaseName = 'pinnit'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// DB
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'mysql:mysql-connector-java'
	testRuntimeOnly('com.h2database:h2')

	//Querydsl 추가
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation "org.assertj:assertj-core:3.20.2"
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// Security
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// jwt 구현 라이브러리
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'

	// Validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// AWS (S3, Cloud Front)
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	//Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	//Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	//mail-validation
	implementation 'org.springframework.boot:spring-boot-starter-mail'


	// Point. Hibernate 버전과 동기화해야 한다.
	implementation group: 'org.hibernate', name: 'hibernate-spatial', version: '6.1.6.Final'

	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
}

tasks.named('test') {
	useJUnitPlatform()
}

task copyPrivate(type: Copy) {
	copy {
		from './submodule-config/main'
		include "*.yml"
		into 'src/main/resources'
	}
	copy {
		from './submodule-config/test'
		include "application.yml"
		into 'src/test/resources'
	}
}

def querydslSrcDir = 'build/generated/querydsl'
sourceSets {
	main {
		java {
			srcDirs += [ querydslSrcDir ]
		}
	}
}
compileJava {
	options.compilerArgs << '-Aquerydsl.generatedAnnotationClass=javax.annotation.Generated'
}
tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(querydslSrcDir)
}
clean {
	delete file('build/generated/querydsl')
}
